plugins {
    id 'com.onesignal.androidsdk.onesignal-gradle-plugin'
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.secrets_gradle_plugin' version("0.4")
    id "com.apollographql.apollo3" version("3.0.0")
}

android {
    compileSdk 32
    defaultConfig {
        applicationId "com.kl3jvi.animity"
        minSdk 21
        targetSdk 32
        versionCode 6
        versionName "1.0.4"
        archivesBaseName = "Animity-v$versionName"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
        }
    }
    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi-v7a", "arm64-v8a", "x86_64"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }


}

apollo {
    srcDir("src/main/graphql")
    packageName.set("com.kl3jvi.animity")
    generateKotlinModels.set(true)
    excludes.add("**/schema.json.graphql")

}

dependencies {
    def coordinatorLayoutVersion = "1.2.0"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$coordinatorLayoutVersion"
    def androidCoreVersion = "1.7.0"
    implementation "androidx.core:core-ktx:$androidCoreVersion"

    def appCompatVersion = "1.4.1"
    def materialVersion = "1.5.0"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "com.google.android.material:material:$materialVersion"

    def constraintLayoutVersion = "2.1.3"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"

    def livedataVersion = "2.4.0"
    def viewModelVersion = "2.4.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$livedataVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$viewModelVersion"

    def navigationComponentVersion = "2.4.0-rc01"
    implementation "androidx.navigation:navigation-runtime-ktx:$navigationComponentVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationComponentVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationComponentVersion"

    // Coroutines
    def coroutinesVersion = "1.6.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

    // Coroutine Lifecycle Scopes
    def lifecycle_version = "2.4.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    def analyticsVersion = "20.0.2"
    implementation "com.google.firebase:firebase-analytics-ktx:$analyticsVersion"

    def crashlyticsVersion = "18.2.6"
    implementation "com.google.firebase:firebase-crashlytics-ktx:$crashlyticsVersion"

    // Hilt DI
    def hiltVersion = "2.40.5"
    def hiltAnnotationProcessor = "2.38.1"
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltAnnotationProcessor"

    // Retrofit
    def retrofitVersion = "2.9.0"
    def interceptor_version = "5.0.0-alpha.2"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$interceptor_version"


    //Html Parsing
    def jsoupVersion = "1.13.1"
    implementation "org.jsoup:jsoup:$jsoupVersion"

    //Room Library
    def room_version = "2.4.1"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //Video Player
    def exoplayerVersion = "2.16.1"
    implementation "com.google.android.exoplayer:exoplayer:$exoplayerVersion"
    implementation "com.google.android.exoplayer:extension-cast:$exoplayerVersion"
    implementation "com.google.android.exoplayer:extension-mediasession:$exoplayerVersion"

    //Bottom bar
    def bottomBarVersion = "1.7.8"
    implementation "com.github.ibrahimsn98:SmoothBottomBar:$bottomBarVersion"

    //Expandable TextView
    def expandableTextViewVersion = "0.1.4"
    implementation "com.ms-square:expandableTextView:$expandableTextViewVersion"

    //animation lib
    def lottieVersion = "4.2.2"
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // image library
    def coilVersion = "1.4.0"
    implementation "io.coil-kt:coil:$coilVersion"
    implementation "io.coil-kt:coil-gif:$coilVersion"


    //splash screen
    def splashVersion = "1.0.0-beta01"
    implementation "androidx.core:core-splashscreen:$splashVersion"

    def onesignalVersion = "4.6.2"
    implementation "com.onesignal:OneSignal:$onesignalVersion"


    def textUtilsVersion = "1.7"
    implementation "org.apache.commons:commons-text:$textUtilsVersion"

    def paginationVersion = "3.1.0"
    implementation "androidx.paging:paging-runtime-ktx:$paginationVersion"

    def inAppBrowserVersion = "1.4.0"
    implementation "androidx.browser:browser:$inAppBrowserVersion"

    // Apollo GraphQl
    def apolloVersion = "3.0.0"
    implementation "com.apollographql.apollo3:apollo-runtime:$apolloVersion"


}
